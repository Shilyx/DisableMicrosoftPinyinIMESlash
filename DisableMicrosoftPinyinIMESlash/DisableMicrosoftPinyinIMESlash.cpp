/*
 *  @file  : DisableMicrosoftPinyinIMESlash.cpp
 *  @author: shilyx
 *  @date  : 2021-02-15 11:29:04.610
 *  @note  : Generated by SlxTemplates
 */

#include <Windows.h>
#include <CommCtrl.h>
#pragma warning(disable: 4786)
#include <tchar.h>
#include "resource.h"

#define WND_TEXT L"{F9AFBBE9-77C2-4B32-8B51-1F59E2EB4D02}"

class CDisableMicrosoftPinyinIMESlashDialog {
#define DISABLEMICROSOFTPINYINIMESLASH_OBJECT_PROP_NAME L"__DisableMicrosoftPinyinIMESlashObject"

public:
    CDisableMicrosoftPinyinIMESlashDialog(HINSTANCE hInstance, LPCTSTR lpTemplate, HWND hParent)
        : m_hInstance(hInstance)
        , m_lpTemplate(lpTemplate)
        , m_hwndDlg(NULL)
        , m_hParent(hParent) {
    }

    HWND CreateModellessDialog() {
        return CreateDialogParamW(m_hInstance, m_lpTemplate, m_hParent, DisableMicrosoftPinyinIMESlashDialogProc, (LPARAM)this);
    }

    operator HWND() const {
        return m_hwndDlg;
    }

    static int DemoMessageLoop(HWND hMainDlg) {
        MSG msg;

        while (TRUE) {
            int nRet = GetMessage(&msg, NULL, 0, 0);

            if (nRet < 0) {
                break;
            }

            if (nRet == 0) {
                return (int)msg.wParam;
            }

            if (!IsDialogMessageW(hMainDlg, &msg)) {
                TranslateMessage(&msg);
                DispatchMessageW(&msg);
            }
        }

        return 0;
    }

    static CDisableMicrosoftPinyinIMESlashDialog *GetBindObject(HWND hwndDlg) {
        return (CDisableMicrosoftPinyinIMESlashDialog *)GetProp(hwndDlg, DISABLEMICROSOFTPINYINIMESLASH_OBJECT_PROP_NAME);
    }

private:
    static INT_PTR CALLBACK DisableMicrosoftPinyinIMESlashDialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) {
        if (uMsg == WM_INITDIALOG) {
            SetProp(hwndDlg, DISABLEMICROSOFTPINYINIMESLASH_OBJECT_PROP_NAME, (HANDLE)lParam);
        }

        CDisableMicrosoftPinyinIMESlashDialog *pDisableMicrosoftPinyinIMESlashDialog = GetBindObject(hwndDlg);

        if (pDisableMicrosoftPinyinIMESlashDialog != NULL) {
            return pDisableMicrosoftPinyinIMESlashDialog->DisableMicrosoftPinyinIMESlashDialogPrivateProc(hwndDlg, uMsg, wParam, lParam);
        }

        return FALSE;
    }

    INT_PTR CALLBACK DisableMicrosoftPinyinIMESlashDialogPrivateProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) {
        switch (uMsg) {
        case WM_INITDIALOG:{
            HICON hIcon = LoadIcon(m_hInstance, MAKEINTRESOURCE(IDI_MAINFRAME));

            SendMessageW(hwndDlg, WM_SETICON, ICON_BIG, (LPARAM)hIcon);
            SendMessageW(hwndDlg, WM_SETICON, ICON_SMALL, (LPARAM)hIcon);

            m_hwndDlg = hwndDlg;
            OnInitDialog();

            break;}

        case WM_CLOSE:
            DestroyWindow(hwndDlg);
            break;

        case WM_DESTROY:
            OnDestroy();
            PostQuitMessage(0);
            RemovePropW(hwndDlg, DISABLEMICROSOFTPINYINIMESLASH_OBJECT_PROP_NAME);
            break;

        default:
            break;
        }

        return FALSE;
    }

    void OnInitDialog() {
        SetWindowTextW(m_hwndDlg, WND_TEXT);

        Hook();
    }

    void OnDestroy() {
        Unhook();
    }

    void Hook() {
        m_hHook = SetWindowsHookExW(WH_KEYBOARD_LL, LowLevelKeyboardProc, NULL, 0);
    }

    void Unhook() {
        if (m_hHook != NULL) {
            UnhookWindowsHookEx(m_hHook);
        }
    }

    static LRESULT CALLBACK LowLevelKeyboardProc(
        _In_ int    nCode,
        _In_ WPARAM wParam,
        _In_ LPARAM lParam
    ) {
        if (nCode == HC_ACTION && lParam != 0) {
            if (GetKeyState(VK_SHIFT) >= 0) {
                if (wParam == WM_KEYDOWN || wParam == WM_KEYUP) {
                    LPKBDLLHOOKSTRUCT lpKbs = (LPKBDLLHOOKSTRUCT)lParam;

                    if (lpKbs->vkCode == VK_OEM_2) {
                        if (wParam == WM_KEYDOWN) {
                            keybd_event(VK_DIVIDE, 0, 0, lpKbs->dwExtraInfo);
                        } else {
                            keybd_event(VK_DIVIDE, 0, KEYEVENTF_KEYUP, lpKbs->dwExtraInfo);
                        }
                        return 1;
                    }
                }
            }
        }

        return CallNextHookEx(NULL, nCode, wParam, lParam);
    }

private:
    HHOOK m_hHook;
    HWND m_hwndDlg;
    HWND m_hParent;
    HINSTANCE m_hInstance;
    LPCWSTR m_lpTemplate;
};

int APIENTRY wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nShowCmd) {
    InitCommonControls();

    if (IsWindow(FindWindowW(NULL, WND_TEXT))) {
        return MessageBoxW(NULL, L"已在运行中，请勿重复运行", NULL, MB_SYSTEMMODAL | MB_ICONINFORMATION);
    }

    CDisableMicrosoftPinyinIMESlashDialog dlg(hInstance, MAKEINTRESOURCE(IDD_DIALOG), NULL);
    HWND hDlg = dlg.CreateModellessDialog();

    // ShowWindow(hDlg, nShowCmd);
    UpdateWindow(hDlg);

    return CDisableMicrosoftPinyinIMESlashDialog::DemoMessageLoop(hDlg);
}